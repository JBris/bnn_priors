#+HTML_HEAD: <style type="text/css">body{margin:auto;max-width:50em;line-height:1.3;font-size:18px;color:#222}</style>
#+TITLE: Langevin MCMC and its M-H acceptance probability
#+LATEX_HEADER: \usepackage{adria}
#+LATEX_HEADER: \usepackage[english]{babel}
#+LATEX_HEADER: \usepackage[style=authoryear,bibencoding=utf8,backend=biber,natbib=true,uniquename=false,uniquelist=false,maxbibnames=99]{biblatex}
#+LATEX_HEADER: \addbibresource{~/Documents/references/references.bib}

* Introduction
  The acceptance probability of an MCMC sampler that follows the Langevin
  stochastic differential equations (SDE) is always 1. However, to be able to
  simulate the SDE, we discretise the time steps, and in so introduce error.
  This error can be exactly corrected cite:sarkka_solin_2019 by adding a
  Metropolis-Hastings (M-H) step, that applies rejection sampling for the new
  state of the SDE. Additional error is introduced by the approximate
  floating-point arithmetic, but we will disregard it.

  In Langevin MCMC, we have some parameters $\theta$ to be inferred (also named
  /position variables/), and their corresponding /momentum variables/ $m$. The
  generalised Metropolis-Hastings acceptance probability cite:song2020hams,
  which negates the final momentum, is as follows. If a transition goes from 
  $(\theta_0, m_0) \to (\theta_*, m_*)$, its acceptance probability is
  \begin{equation}
    \text{Pr}_\text{accept}(\theta_*, m_*) = \text{min}\left(1,
        \frac{\pi(\theta_*) T(\theta_0, -m_0 | \theta_*, -m_*)}
            {\pi(\theta_0) T(\theta_*, m_* | \theta_0, m_0)} \right)
  \end{equation}
  for transition probability density $T$ and target distribution density $\pi$.
  If a sample $(\theta_*, m_*)$ is rejected, we have to set the next state of
  the chain to $(\theta_0, -m_0)$ (and not $(\theta_0, m_0)$ like ordinary
  Metropolis-Hastings).

  It is important to note that the transition probability distribution $T$, and
  thus the acceptance probability, very much depend on the scheme we use to
  discretise time in the SDE. That is, the integrator.
  
* Symplectic Euler integrator 
  The Symplectic Euler integrator used in cite:wenzel20posterior is not
  time-reversible. This implies that the probability of transitioning
  $(\theta_*, -m_*) \to (\theta_0, m_0)$ is always zero, strictly speaking.
  This is because the value of $\theta_*$ is determined entirely by the
  previous parameters, $\theta_0$, and its *contemporaneous* momentum $m_*$.
  The forward transition for the parameters is
  \begin{equation}
    \theta_* = \theta_0 + h M^{-1} m_*.
  \end{equation}

  Now, consider what the backward transition would be. The momentum $-m_*$
  evolves to $-m_0$, and the parameters $\theta_*$ evolve to $\theta_0$. The
  transition, now applied backward, is
  \begin{equation}
    \theta_0 = \theta_* + h M^{-1} (-m_0),
  \end{equation}
  which *cannot* be true if $m_0 \ne m_*$.

* Leapfrog Verlet integration
  We use the Verlet Leapfrog integrator from cite:GG19statistics. It has two
  desirable features. First, it is time-reversible, which means the forward and
  backward transition probability densities cancel out. Thus, the M-H acceptance
  probability is $\text{min}(1, \pi(\theta_*) / \pi(\theta_0))$.

  Second, it uses the gradient with respect to the parameters at
  whole time steps ($0, 1, \dots$) and with respect to the momentum at half time
  steps ($1/2, 3/2, \dots$). Thus, no additional computation is needed to
  calculate $\pi(\theta_*) / \pi(\theta_0)$ when using full batch gradients.
  
  The Langevin dynamics differential equations are
  \begin{align}
    dr(t) &= v(t) \\
    m\,dv(t) &= -\alpha v(t) + f(r(t)) + \sqrt{2\alpha T}dW
  \end{align}
  where $dW$ is a Wiener process.
  
  For discrete time step $h$, the corresponding Verlet update equations are 
  \begin{align}
  a &= (1 - \alpha h / 2m) / (1 + \alpha h / 2m) \\
  b &= 1 / (1 + \alpha h / 2m) \\
  v\ssup{n+\frac{1}{2}} &= \sqrt{b} \sqb{v\ssup{n} + \frac{h}{2m}f\ssup{n} + \frac{1}{2m}\beta\ssup{n+1}} \\
  r\ssup{n+1} &= r\ssup{n}+ \sqrt{b}\, h v\ssup{n+\frac{1}{2}} \\
  v\ssup{n+1} &= \frac{a}{\sqrt{b}}v\ssup{n+\frac{1}{2}} + \frac{h}{2m}f\ssup{n+1} + \frac{1}{2m}\beta\ssup{n+1},\\
  \end{align}
  for $\beta\ssup{t} \sim \Normal{0, 2\alpha T}$.
  
  We may also combine the two updates to $v$ to give:
  \begin{equation}
  v\ssup{t+\frac{1}{2}} = a v\ssup{t-\frac{1}{2}} + \frac{h\sqrt{b}}{m}f\ssup{t} + \frac{\sqrt{b}}{2m}\bra{\beta\ssup{t} + \beta\ssup{n+1}}
  \end{equation}
 
** Translating the notation to Wenzel et al. 2020
   The new notation is
   \begin{align*}
   \vtheta &:= r(t) & \vm &:= m v(t) \\
   \vM &:= m &   \nabla_\vtheta U(\vtheta) &:= -f(r(t)) \\
   \gamma &:= \alpha / m & d\vW &:= dW \\ 
   \end{align*}
   
The Langevin differential equations are now
   \begin{align}
     d\vtheta &= \vM^{-1} \vm dt \\
     d\vm &= - \nabla_\vtheta U(\vtheta)dt -\gamma \vm dt  + \sqrt{2\gamma T}\vM^{1/2} d\vW
   \end{align}
   
And the Verlet integration scheme is
  \begin{align}
  b &= (1 + \gamma (h/2))^{-1} \\
  a &= (1 - \gamma (h/2)) \cdot b\\
  \vm\ssup{1/2} &= \sqrt{b}\vm\ssup{0} - \frac{h}{2}\sqrt{b}\vM^{-1}\nabla_\vtheta(\vtheta\ssup{0})
                + \frac{1}{2}\sqrt{b}\sqrt{2\gamma T}\vM^{-1/2}\epsilon\ssup{1} \\
  \vm\ssup{t+1/2} &= a\,\vm\ssup{t-1/2} - h\sqrt{b} \vM^{-1} \nabla_\vtheta(\vtheta\ssup{t})
                   + \frac{1}{2}\sqrt{b}\sqrt{2\gamma T} \vM^{-1/2}(\epsilon\ssup{t} + \epsilon\ssup{t+1}) \\
  r_{t+1} &= r_t + h\sqrt{b}v_{t+1/2}
  \end{align}
   
#+latex: \printbibliography
bibliographystyle:unsrt
bibliography:~/Documents/references/references.bib
